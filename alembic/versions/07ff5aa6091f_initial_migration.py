# alembic/versions/07ff5aa6091f_initial_migration.py
"""Initial migration

Revision ID: 07ff5aa6091f
Revises: 
Create Date: 2023-10-01 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '07ff5aa6091f'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Создаем таблицу tags, так как она не зависит от других
    op.create_table('tags',
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('tag_type', sa.Enum('set', 'minifigure', 'both', name='tagtype'), nullable=False),
        sa.PrimaryKeyConstraint('tag_id'),
        sa.UniqueConstraint('name')
    )
    op.create_index('ix_tags_tag_id', 'tags', ['tag_id'], unique=False)

    # Создаем таблицу sets без внешнего ключа на photos
    op.create_table('sets',
        sa.Column('set_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('piece_count', sa.Integer(), nullable=False),
        sa.Column('release_year', sa.Integer(), nullable=False),
        sa.Column('theme', sa.String(), nullable=False),
        sa.Column('sub_theme', sa.String(), nullable=True),
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('face_photo_id', sa.Integer(), nullable=True),  # Временно без ForeignKey
        sa.PrimaryKeyConstraint('set_id')
    )
    op.create_index('ix_sets_set_id', 'sets', ['set_id'], unique=False)

    # Создаем таблицу minifigures без внешнего ключа на photos
    op.create_table('minifigures',
        sa.Column('minifigure_id', sa.String(), nullable=False),
        sa.Column('character_name', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('face_photo_id', sa.Integer(), nullable=True),  # Временно без ForeignKey
        sa.PrimaryKeyConstraint('minifigure_id'),
        sa.UniqueConstraint('name')
    )
    op.create_index('ix_minifigures_minifigure_id', 'minifigures', ['minifigure_id'], unique=False)

    # Создаем таблицу photos, так как теперь sets и minifigures существуют
    op.create_table('photos',
        sa.Column('photo_id', sa.Integer(), nullable=False),
        sa.Column('set_id', sa.Integer(), nullable=True),
        sa.Column('minifigure_id', sa.String(), nullable=True),
        sa.Column('photo_url', sa.String(), nullable=False),
        sa.Column('is_main', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['set_id'], ['sets.set_id'], ),
        sa.ForeignKeyConstraint(['minifigure_id'], ['minifigures.minifigure_id'], ),
        sa.PrimaryKeyConstraint('photo_id')
    )
    op.create_index('ix_photos_photo_id', 'photos', ['photo_id'], unique=False)

    # Добавляем внешние ключи для sets и minifigures на photos
    op.create_foreign_key('fk_sets_face_photo_id', 'sets', 'photos', ['face_photo_id'], ['photo_id'])
    op.create_foreign_key('fk_minifigures_face_photo_id', 'minifigures', 'photos', ['face_photo_id'], ['photo_id'])

    # Создаем связующие таблицы
    op.create_table('set_minifigures',
        sa.Column('set_id', sa.Integer(), nullable=False),
        sa.Column('minifigure_id', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['set_id'], ['sets.set_id'], ),
        sa.ForeignKeyConstraint(['minifigure_id'], ['minifigures.minifigure_id'], ),
        sa.PrimaryKeyConstraint('set_id', 'minifigure_id')
    )

    op.create_table('set_tags',
        sa.Column('set_id', sa.Integer(), nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['set_id'], ['sets.set_id'], ),
        sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ),
        sa.PrimaryKeyConstraint('set_id', 'tag_id')
    )

    op.create_table('minifigure_tags',
        sa.Column('minifigure_id', sa.String(), nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['minifigure_id'], ['minifigures.minifigure_id'], ),
        sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ),
        sa.PrimaryKeyConstraint('minifigure_id', 'tag_id')
    )
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Удаляем связующие таблицы
    op.drop_table('minifigure_tags')
    op.drop_table('set_tags')
    op.drop_table('set_minifigures')

    # Удаляем внешние ключи
    op.drop_constraint('fk_minifigures_face_photo_id', 'minifigures', type_='foreignkey')
    op.drop_constraint('fk_sets_face_photo_id', 'sets', type_='foreignkey')

    # Удаляем остальные таблицы
    op.drop_index('ix_photos_photo_id', table_name='photos')
    op.drop_table('photos')
    op.drop_index('ix_minifigures_minifigure_id', table_name='minifigures')
    op.drop_table('minifigures')
    op.drop_index('ix_sets_set_id', table_name='sets')
    op.drop_table('sets')
    op.drop_index('ix_tags_tag_id', table_name='tags')
    op.drop_table('tags')
    # ### end Alembic commands ###